{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SREERAM\\\\Desktop\\\\Personal\\\\Sreeram\\\\College\\\\Hack-AI-thon\\\\hackathon\\\\ads\\\\SREERAM\\\\frontend\\\\src\\\\Components\\\\Game.jsx\";\nimport React from 'react';\nimport _ from 'lodash';\nimport styled from 'styled-components';\nimport Preloader from './Preloader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cellSize = '70px';\nconst Container = styled.div`\n  height: 80%;\n\n  .game {\n    margin: auto;\n    text-align: center;\n    line-height: ${cellSize};\n    width: calc(4 * ${cellSize} + ${cellSize} * 0.1 * 4 + 40px);\n    height: calc(4 * ${cellSize} + ${cellSize} * 0.1 * 4 + 40px);\n    position: relative;\n\n    .cell {\n      width: ${cellSize};\n      height: ${cellSize};\n      margin-right: calc(${cellSize} * 0.1);\n      border-radius: 4px;\n      margin-bottom: calc(${cellSize} * 0.1);\n      background: white;\n      box-shadow: rgba(0, 0, 0, 0.2) 0 1px 2px 0;\n      color: #333;\n      font-size: 1.2rem;\n      font-weight: bold;\n      cursor: pointer;\n      transition: all 0.3s ease-in;\n      position: absolute;\n\n      &:hover {\n        transform: scale(1.05);\n        box-shadow: rgba(0, 0, 0, 0.4) 0 2px 4px 0;\n      }\n    }\n\n    .empty {\n      opacity: 0;\n    }\n  }\n`;\n_c = Container;\nconst layout = _.range(0, 16).map(n => {\n  const row = Math.floor(n / 4);\n  const col = n % 4;\n  return [80 * col, 80 * row];\n});\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      positions: _.shuffle(_.range(0, 16))\n    };\n  }\n  updatePosition(index) {\n    let {\n      positions\n    } = this.state;\n    let emptyIndex = positions.indexOf(0);\n    let targetIndex = positions.indexOf(index);\n    const dif = Math.abs(targetIndex - emptyIndex);\n    if (dif === 1 || dif === 4) {\n      positions[emptyIndex] = index;\n      positions[targetIndex] = 0;\n      this.setState({\n        positions\n      });\n      let win = _.every(positions, (value, index, array) => {\n        value = value || 16;\n        return index === 0 || parseInt(array[index - 1]) <= parseInt(value);\n      });\n      if (win) {\n        window.alert('U Win!!!');\n      }\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game\",\n        children: this.state.positions.map((i, key) => {\n          let cellClass = key ? 'cell' : 'empty cell';\n          let [x, y] = layout[this.state.positions.indexOf(key)];\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: cellClass,\n            onClick: () => this.updatePosition(key),\n            style: {\n              transform: `translate3d(${x}px,${y}px,0) scale(1.1)`\n            },\n            children: key\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), \"// \", /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Container\");","map":{"version":3,"names":["React","_","styled","Preloader","jsxDEV","_jsxDEV","cellSize","Container","div","_c","layout","range","map","n","row","Math","floor","col","Game","Component","constructor","props","state","positions","shuffle","updatePosition","index","emptyIndex","indexOf","targetIndex","dif","abs","setState","win","every","value","array","parseInt","window","alert","render","className","children","i","key","cellClass","x","y","onClick","style","transform","fileName","_jsxFileName","lineNumber","columnNumber","$RefreshReg$"],"sources":["C:/Users/SREERAM/Desktop/Personal/Sreeram/College/Hack-AI-thon/hackathon/ads/SREERAM/frontend/src/Components/Game.jsx"],"sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport styled from 'styled-components';\nimport Preloader from './Preloader'\n\nconst cellSize = '70px';\n\nconst Container = styled.div`\n  height: 80%;\n\n  .game {\n    margin: auto;\n    text-align: center;\n    line-height: ${cellSize};\n    width: calc(4 * ${cellSize} + ${cellSize} * 0.1 * 4 + 40px);\n    height: calc(4 * ${cellSize} + ${cellSize} * 0.1 * 4 + 40px);\n    position: relative;\n\n    .cell {\n      width: ${cellSize};\n      height: ${cellSize};\n      margin-right: calc(${cellSize} * 0.1);\n      border-radius: 4px;\n      margin-bottom: calc(${cellSize} * 0.1);\n      background: white;\n      box-shadow: rgba(0, 0, 0, 0.2) 0 1px 2px 0;\n      color: #333;\n      font-size: 1.2rem;\n      font-weight: bold;\n      cursor: pointer;\n      transition: all 0.3s ease-in;\n      position: absolute;\n\n      &:hover {\n        transform: scale(1.05);\n        box-shadow: rgba(0, 0, 0, 0.4) 0 2px 4px 0;\n      }\n    }\n\n    .empty {\n      opacity: 0;\n    }\n  }\n`;\n\nconst layout = _.range(0, 16).map(n => {\n    const row = Math.floor(n / 4);\n    const col = n % 4;\n    return [80 * col, 80 * row];\n});\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            positions: _.shuffle(_.range(0, 16))\n        };\n    }\n\n    updatePosition(index) {\n        let { positions } = this.state;\n        let emptyIndex = positions.indexOf(0);\n        let targetIndex = positions.indexOf(index);\n        const dif = Math.abs(targetIndex - emptyIndex);\n        if (dif === 1 || dif === 4) {\n            positions[emptyIndex] = index;\n            positions[targetIndex] = 0;\n            this.setState({ positions });\n            let win = _.every(positions, (value, index, array) => {\n                value = value || 16;\n                return index === 0 || parseInt(array[index - 1]) <= parseInt(value);\n            });\n            if (win) {\n                window.alert('U Win!!!');\n            }\n        }\n    }\n\n    render() {\n        return (\n            <Container className=\"container\">\n                <div className=\"game\">\n                    {this.state.positions.map((i, key) => {\n                        let cellClass = key ? 'cell' : 'empty cell';\n                        let [x, y] = layout[this.state.positions.indexOf(key)];\n                        return (\n                            <div\n                                key={key}\n                                className={cellClass}\n                                onClick={() => this.updatePosition(key)}\n                                style={{ transform: `translate3d(${x}px,${y}px,0) scale(1.1)` }}\n                            >\n                                {key}\n                            </div>\n                        );\n                    })}\n                </div>\n                // <Preloader />\n            </Container>\n        );\n    }\n}\n\nexport default Game;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,CAAC,MAAM,QAAQ;AACtB,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,SAAS,MAAM,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAG,MAAM;AAEvB,MAAMC,SAAS,GAAGL,MAAM,CAACM,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA,mBAAmBF,QAAS;AAC5B,sBAAsBA,QAAS,MAAKA,QAAS;AAC7C,uBAAuBA,QAAS,MAAKA,QAAS;AAC9C;AACA;AACA;AACA,eAAeA,QAAS;AACxB,gBAAgBA,QAAS;AACzB,2BAA2BA,QAAS;AACpC;AACA,4BAA4BA,QAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,EAAA,GApCIF,SAAS;AAsCf,MAAMG,MAAM,GAAGT,CAAC,CAACU,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,GAAG,CAACC,CAAC,IAAI;EACnC,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACH,CAAC,GAAG,CAAC,CAAC;EAC7B,MAAMI,GAAG,GAAGJ,CAAC,GAAG,CAAC;EACjB,OAAO,CAAC,EAAE,GAAGI,GAAG,EAAE,EAAE,GAAGH,GAAG,CAAC;AAC/B,CAAC,CAAC;AAEF,MAAMI,IAAI,SAASlB,KAAK,CAACmB,SAAS,CAAC;EAC/BC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACTC,SAAS,EAAEtB,CAAC,CAACuB,OAAO,CAACvB,CAAC,CAACU,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IACvC,CAAC;EACL;EAEAc,cAAcA,CAACC,KAAK,EAAE;IAClB,IAAI;MAAEH;IAAU,CAAC,GAAG,IAAI,CAACD,KAAK;IAC9B,IAAIK,UAAU,GAAGJ,SAAS,CAACK,OAAO,CAAC,CAAC,CAAC;IACrC,IAAIC,WAAW,GAAGN,SAAS,CAACK,OAAO,CAACF,KAAK,CAAC;IAC1C,MAAMI,GAAG,GAAGf,IAAI,CAACgB,GAAG,CAACF,WAAW,GAAGF,UAAU,CAAC;IAC9C,IAAIG,GAAG,KAAK,CAAC,IAAIA,GAAG,KAAK,CAAC,EAAE;MACxBP,SAAS,CAACI,UAAU,CAAC,GAAGD,KAAK;MAC7BH,SAAS,CAACM,WAAW,CAAC,GAAG,CAAC;MAC1B,IAAI,CAACG,QAAQ,CAAC;QAAET;MAAU,CAAC,CAAC;MAC5B,IAAIU,GAAG,GAAGhC,CAAC,CAACiC,KAAK,CAACX,SAAS,EAAE,CAACY,KAAK,EAAET,KAAK,EAAEU,KAAK,KAAK;QAClDD,KAAK,GAAGA,KAAK,IAAI,EAAE;QACnB,OAAOT,KAAK,KAAK,CAAC,IAAIW,QAAQ,CAACD,KAAK,CAACV,KAAK,GAAG,CAAC,CAAC,CAAC,IAAIW,QAAQ,CAACF,KAAK,CAAC;MACvE,CAAC,CAAC;MACF,IAAIF,GAAG,EAAE;QACLK,MAAM,CAACC,KAAK,CAAC,UAAU,CAAC;MAC5B;IACJ;EACJ;EAEAC,MAAMA,CAAA,EAAG;IACL,oBACInC,OAAA,CAACE,SAAS;MAACkC,SAAS,EAAC,WAAW;MAAAC,QAAA,gBAC5BrC,OAAA;QAAKoC,SAAS,EAAC,MAAM;QAAAC,QAAA,EAChB,IAAI,CAACpB,KAAK,CAACC,SAAS,CAACX,GAAG,CAAC,CAAC+B,CAAC,EAAEC,GAAG,KAAK;UAClC,IAAIC,SAAS,GAAGD,GAAG,GAAG,MAAM,GAAG,YAAY;UAC3C,IAAI,CAACE,CAAC,EAAEC,CAAC,CAAC,GAAGrC,MAAM,CAAC,IAAI,CAACY,KAAK,CAACC,SAAS,CAACK,OAAO,CAACgB,GAAG,CAAC,CAAC;UACtD,oBACIvC,OAAA;YAEIoC,SAAS,EAAEI,SAAU;YACrBG,OAAO,EAAEA,CAAA,KAAM,IAAI,CAACvB,cAAc,CAACmB,GAAG,CAAE;YACxCK,KAAK,EAAE;cAAEC,SAAS,EAAG,eAAcJ,CAAE,MAAKC,CAAE;YAAkB,CAAE;YAAAL,QAAA,EAE/DE;UAAG,GALCA,GAAG;YAAAO,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAMP,CAAC;QAEd,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,OACH,eAAAjD,OAAA,CAACF,SAAS;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACT,CAAC;EAEpB;AACJ;AAEA,eAAepC,IAAI;AAAC,IAAAT,EAAA;AAAA8C,YAAA,CAAA9C,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}