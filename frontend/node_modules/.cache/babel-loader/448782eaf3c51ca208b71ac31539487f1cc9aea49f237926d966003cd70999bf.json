{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SREERAM\\\\Desktop\\\\Personal\\\\Sreeram\\\\College\\\\Hack-AI-thon\\\\hackathon\\\\ads\\\\SREERAM\\\\frontend\\\\src\\\\Components\\\\Game.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport swal from 'sweetalert2';\nimport shuffle from 'lodash/shuffle';\nimport './MemoryGame.css'; // Import your CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst symbols = ['bicycle', 'bicycle', 'leaf', 'leaf', 'cube', 'cube', 'anchor', 'anchor', 'paper-plane-o', 'paper-plane-o', 'bolt', 'bolt', 'bomb', 'bomb', 'diamond', 'diamond'];\nconst MemoryGame = () => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [opened, setOpened] = useState([]);\n  const [match, setMatch] = useState(0);\n  const [moves, setMoves] = useState(0);\n  const [clicks, setClicks] = useState(0);\n  const [timer, setTimer] = useState(null);\n  useEffect(() => {\n    init();\n  }, []);\n  useEffect(() => {\n    if (match === 8) {\n      const score = setRating(moves).score;\n      setTimeout(() => {\n        endGame(moves, score);\n      }, 500);\n    }\n  }, [match]);\n  const gameTimer = () => {\n    const startTime = new Date().getTime();\n\n    // Update the timer every second\n    const intervalId = setInterval(() => {\n      const now = new Date().getTime();\n      const elapsed = now - startTime;\n      const minutes = Math.floor(elapsed % (1000 * 60 * 60) / (1000 * 60));\n      let seconds = Math.floor(elapsed % (1000 * 60) / 1000);\n      if (seconds < 10) {\n        seconds = `0${seconds}`;\n      }\n      const currentTime = `${minutes}:${seconds}`;\n      // Update clock on game screen and modal\n      // Assuming you have a state variable for currentTime\n      // e.g., const [currentTime, setCurrentTime] = useState('0:00');\n      // setCurrentTime(currentTime);\n    }, 750);\n    setTimer(intervalId);\n  };\n  const init = () => {\n    const shuffledCards = shuffle(symbols);\n    setCards(shuffledCards);\n    setMatch(0);\n    setMoves(0);\n    setClicks(0);\n    clearInterval(timer);\n    gameTimer();\n  };\n  const setRating = moves => {\n    let score = 3;\n    if (moves > 10 && moves <= 14) {\n      score = 2;\n    } else if (moves > 14) {\n      score = 1;\n    }\n    return {\n      score\n    };\n  };\n  const endGame = (moves, score) => {\n    const msg = score === 1 ? `${score} Star` : `${score} Stars`;\n    swal({\n      allowEscapeKey: false,\n      allowOutsideClick: false,\n      title: 'Congratulations! You Won!',\n      text: `With ${moves} Moves and ${msg}\\n Woooooo!`,\n      type: 'success',\n      confirmButtonColor: '#02ccba',\n      confirmButtonText: 'Play again!'\n    }).then(isConfirm => {\n      if (isConfirm) {\n        init();\n      }\n    });\n  };\n  const onCardClick = index => {\n    setClicks(clicks + 1);\n    if (clicks === 0) {\n      gameTimer();\n    }\n    if (opened.length > 1 || cards[index] === opened[0]) return;\n    setOpened([...opened, cards[index]]);\n    if (opened.length === 1) {\n      setMoves(moves + 1);\n      if (cards[index] === opened[0]) {\n        setMatch(match + 1);\n        setOpened([]);\n      } else {\n        setTimeout(() => {\n          setOpened([]);\n        }, 800);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"containerdiv\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Memory Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"score-panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"deck\",\n      children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `card ${opened.includes(symbol) ? 'open' : ''}`,\n        onClick: () => onCardClick(index),\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `fa fa-${symbol}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 25\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 9\n  }, this);\n};\n_s(MemoryGame, \"0ZCfx/J9RGYWdHy9s15zKuSvfJw=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","swal","shuffle","jsxDEV","_jsxDEV","symbols","MemoryGame","_s","cards","setCards","opened","setOpened","match","setMatch","moves","setMoves","clicks","setClicks","timer","setTimer","init","score","setRating","setTimeout","endGame","gameTimer","startTime","Date","getTime","intervalId","setInterval","now","elapsed","minutes","Math","floor","seconds","currentTime","shuffledCards","clearInterval","msg","allowEscapeKey","allowOutsideClick","title","text","type","confirmButtonColor","confirmButtonText","then","isConfirm","onCardClick","index","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","map","symbol","includes","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SREERAM/Desktop/Personal/Sreeram/College/Hack-AI-thon/hackathon/ads/SREERAM/frontend/src/Components/Game.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport swal from 'sweetalert2';\nimport shuffle from 'lodash/shuffle';\nimport './MemoryGame.css'; // Import your CSS file\n\nconst symbols = ['bicycle', 'bicycle', 'leaf', 'leaf', 'cube', 'cube', 'anchor', 'anchor', 'paper-plane-o', 'paper-plane-o', 'bolt', 'bolt', 'bomb', 'bomb', 'diamond', 'diamond'];\n\nconst MemoryGame = () => {\n    const [cards, setCards] = useState([]);\n    const [opened, setOpened] = useState([]);\n    const [match, setMatch] = useState(0);\n    const [moves, setMoves] = useState(0);\n    const [clicks, setClicks] = useState(0);\n    const [timer, setTimer] = useState(null);\n\n    useEffect(() => {\n        init();\n    }, []);\n\n    useEffect(() => {\n        if (match === 8) {\n            const score = setRating(moves).score;\n            setTimeout(() => {\n                endGame(moves, score);\n            }, 500);\n        }\n    }, [match]);\n\n    const gameTimer = () => {\n        const startTime = new Date().getTime();\n\n        // Update the timer every second\n        const intervalId = setInterval(() => {\n            const now = new Date().getTime();\n            const elapsed = now - startTime;\n            const minutes = Math.floor((elapsed % (1000 * 60 * 60)) / (1000 * 60));\n            let seconds = Math.floor((elapsed % (1000 * 60)) / 1000);\n            if (seconds < 10) {\n                seconds = `0${seconds}`;\n            }\n            const currentTime = `${minutes}:${seconds}`;\n            // Update clock on game screen and modal\n            // Assuming you have a state variable for currentTime\n            // e.g., const [currentTime, setCurrentTime] = useState('0:00');\n            // setCurrentTime(currentTime);\n        }, 750);\n\n        setTimer(intervalId);\n    };\n\n    const init = () => {\n        const shuffledCards = shuffle(symbols);\n        setCards(shuffledCards);\n        setMatch(0);\n        setMoves(0);\n        setClicks(0);\n        clearInterval(timer);\n        gameTimer();\n    };\n\n    const setRating = (moves) => {\n        let score = 3;\n        if (moves > 10 && moves <= 14) {\n            score = 2;\n        } else if (moves > 14) {\n            score = 1;\n        }\n        return { score };\n    };\n\n    const endGame = (moves, score) => {\n        const msg = score === 1 ? `${score} Star` : `${score} Stars`;\n        swal({\n            allowEscapeKey: false,\n            allowOutsideClick: false,\n            title: 'Congratulations! You Won!',\n            text: `With ${moves} Moves and ${msg}\\n Woooooo!`,\n            type: 'success',\n            confirmButtonColor: '#02ccba',\n            confirmButtonText: 'Play again!'\n        }).then((isConfirm) => {\n            if (isConfirm) {\n                init();\n            }\n        });\n    };\n\n    const onCardClick = (index) => {\n        setClicks(clicks + 1);\n        if (clicks === 0) {\n            gameTimer();\n        }\n        if (opened.length > 1 || cards[index] === opened[0]) return;\n\n        setOpened([...opened, cards[index]]);\n        if (opened.length === 1) {\n            setMoves(moves + 1);\n            if (cards[index] === opened[0]) {\n                setMatch(match + 1);\n                setOpened([]);\n            } else {\n                setTimeout(() => {\n                    setOpened([]);\n                }, 800);\n            }\n        }\n    };\n\n    return (\n        <div className=\"containerdiv\">\n            <h1>Memory Game</h1>\n            <div id=\"score-panel\">\n                {/* Display moves, stars, and timer here */}\n            </div>\n            <ul className=\"deck\">\n                {cards.map((symbol, index) => (\n                    <li key={index} className={`card ${opened.includes(symbol) ? 'open' : ''}`} onClick={() => onCardClick(index)}>\n                        <i className={`fa fa-${symbol}`}></i>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default MemoryGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}