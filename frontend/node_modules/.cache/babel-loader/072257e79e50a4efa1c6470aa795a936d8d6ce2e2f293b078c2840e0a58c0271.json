{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SREERAM\\\\Desktop\\\\Personal\\\\Sreeram\\\\College\\\\Hack-AI-thon\\\\hackathon\\\\ads\\\\SREERAM\\\\frontend\\\\src\\\\Components\\\\Analysis.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Analysis = () => {\n  _s();\n  const graphRef = useRef(null);\n  useEffect(() => {\n    const data = [{\n      depression: 3,\n      stress: 5,\n      anxiety: 2,\n      dailyLifePressure: 6,\n      badHabits: 4,\n      progress: 3\n    }\n    // Add more data points as needed\n    ];\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 30,\n      left: 40\n    };\n    const width = 300 - margin.left - margin.right;\n    const height = 200 - margin.top - margin.bottom;\n    const svg = d3.select(graphRef.current).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n    const xScale = d3.scaleLinear().domain([0, 10]).range([0, width]);\n    const yScale = d3.scaleLinear().domain([0, 10]).range([height, 0]);\n\n    // Function to create a line graph\n    const createLineGraph = (xDataKey, yDataKey) => {\n      const line = d3.line().x(d => xScale(d[xDataKey])).y(d => yScale(d[yDataKey]));\n      svg.append('path').datum(data).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 1.5).attr('d', line);\n    };\n\n    // Render multiple graphs\n    const graphTypes = ['dailyLifePressure', 'badHabits', 'progress'];\n    const levels = ['depression', 'stress', 'anxiety'];\n    graphTypes.forEach(graphType => {\n      levels.forEach(level => {\n        createLineGraph(level, graphType);\n      });\n    });\n\n    // Add axes\n    svg.append('g').attr('transform', `translate(0,${height})`).call(d3.axisBottom(xScale));\n    svg.append('g').call(d3.axisLeft(yScale));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: graphRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 10\n  }, this);\n};\n_s(Analysis, \"XNG/roOlNWxTF7ymftfdirhS32A=\");\n_c = Analysis;\nexport default Analysis;\nvar _c;\n$RefreshReg$(_c, \"Analysis\");","map":{"version":3,"names":["React","useEffect","useRef","d3","jsxDEV","_jsxDEV","Analysis","_s","graphRef","data","depression","stress","anxiety","dailyLifePressure","badHabits","progress","margin","top","right","bottom","left","width","height","svg","select","current","append","attr","xScale","scaleLinear","domain","range","yScale","createLineGraph","xDataKey","yDataKey","line","x","d","y","datum","graphTypes","levels","forEach","graphType","level","call","axisBottom","axisLeft","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SREERAM/Desktop/Personal/Sreeram/College/Hack-AI-thon/hackathon/ads/SREERAM/frontend/src/Components/Analysis.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as d3 from 'd3';\n\nconst Analysis = () => {\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    const data = [\n      { depression: 3, stress: 5, anxiety: 2, dailyLifePressure: 6, badHabits: 4, progress: 3 },\n      // Add more data points as needed\n    ];\n\n    const margin = { top: 20, right: 20, bottom: 30, left: 40 };\n    const width = 300 - margin.left - margin.right;\n    const height = 200 - margin.top - margin.bottom;\n\n    const svg = d3.select(graphRef.current)\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', `translate(${margin.left},${margin.top})`);\n\n    const xScale = d3.scaleLinear()\n      .domain([0, 10])\n      .range([0, width]);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, 10])\n      .range([height, 0]);\n\n    // Function to create a line graph\n    const createLineGraph = (xDataKey, yDataKey) => {\n      const line = d3.line()\n        .x(d => xScale(d[xDataKey]))\n        .y(d => yScale(d[yDataKey]));\n\n      svg.append('path')\n        .datum(data)\n        .attr('fill', 'none')\n        .attr('stroke', 'steelblue')\n        .attr('stroke-width', 1.5)\n        .attr('d', line);\n    };\n\n    // Render multiple graphs\n    const graphTypes = ['dailyLifePressure', 'badHabits', 'progress'];\n    const levels = ['depression', 'stress', 'anxiety'];\n    graphTypes.forEach(graphType => {\n      levels.forEach(level => {\n        createLineGraph(level, graphType);\n      });\n    });\n\n    // Add axes\n    svg.append('g')\n      .attr('transform', `translate(0,${height})`)\n      .call(d3.axisBottom(xScale));\n\n    svg.append('g')\n      .call(d3.axisLeft(yScale));\n  }, []);\n\n  return <div ref={graphRef}></div>;\n};\n\nexport default Analysis;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}